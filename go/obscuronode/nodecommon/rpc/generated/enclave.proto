syntax = "proto3";

option go_package = "obscuronode/enclave/rpc/generated";

package generated;

service EnclaveProto {
  // IsReady is used to check whether the server is ready for requests.
  rpc IsReady(IsReadyRequest) returns (IsReadyResponse) {}

  // Attestation - Produces an attestation report which will be used to request the shared secret from another enclave.
  rpc Attestation(AttestationRequest) returns (AttestationResponse) {}

  // GenerateSecret - the genesis enclave is responsible with generating the secret entropy
  rpc GenerateSecret(GenerateSecretRequest) returns (GenerateSecretResponse) {}

  // ShareSecret - return the shared secret encrypted with the key from the attestation
  rpc ShareSecret(FetchSecretRequest) returns (ShareSecretResponse) {}

  // Init - initialise an enclave with a seed received by another enclave
  rpc InitEnclave(InitEnclaveRequest) returns (InitEnclaveResponse) {}

  // IsInitialised - true if the shared secret is available
  rpc IsInitialised(IsInitialisedRequest) returns (IsInitialisedResponse) {}

  // ProduceGenesis - the genesis enclave produces the genesis rollup
  rpc ProduceGenesis(ProduceGenesisRequest) returns (ProduceGenesisResponse) {}

  // IngestBlocks - feed L1 blocks into the enclave to catch up
  rpc IngestBlocks(IngestBlocksRequest) returns (IngestBlocksResponse) {}

  // Start - start speculative execution
  rpc Start(StartRequest) returns (StartResponse) {}

  // SubmitBlock - When a new POBI round starts, the host submits a block to the enclave, which responds with a rollup
  // it is the responsibility of the host to gossip the returned rollup
  // For good functioning the caller should always submit blocks ordered by height
  // submitting a block before receiving a parent of it, will result in it being ignored
  rpc SubmitBlock(SubmitBlockRequest) returns (SubmitBlockResponse) {}

  // SubmitRollup - receive gossiped rollups
  rpc SubmitRollup(SubmitRollupRequest) returns (SubmitRollupResponse) {}

  // SubmitTx - user transactions
  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {}

  // Balance - returns the balance of an address with a block delay
  rpc Balance(BalanceRequest) returns (BalanceResponse) {}

  // Nonce - returns the nonce of the wallet with the given address.
  rpc Nonce(NonceRequest) returns (NonceResponse) {}

  // RoundWinner - calculates and returns the winner for a round
  rpc RoundWinner(RoundWinnerRequest) returns (RoundWinnerResponse) {}

  // Stop gracefully stops the enclave
  rpc Stop(StopRequest) returns (StopResponse) {}

  // GetTransaction returns a transaction given its Signed Hash, returns nil, false when Transaction is unknown
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {}

  // GetTransaction returns a rollup given its hash, returns nil, false when the rollup is unknown
  rpc GetRollup(GetRollupRequest) returns (GetRollupResponse) {}
}

message IsReadyRequest {}
message IsReadyResponse {
  string error = 1;
}

message AttestationRequest {}
message AttestationResponse {
  AttestationReportMsg attestationReportMsg = 1;
}

message GenerateSecretRequest {}
message GenerateSecretResponse {
  bytes encryptedSharedEnclaveSecret = 1;
}

message FetchSecretRequest {
  AttestationReportMsg attestationReportMsg = 1;
}
message ShareSecretResponse {
  bytes encryptedSharedEnclaveSecret = 1;
  string error = 2;
}

message InitEnclaveRequest {
  bytes encryptedSharedEnclaveSecret = 1;
}
message InitEnclaveResponse {
  string error = 1;}

message IsInitialisedRequest {}
message IsInitialisedResponse {
  bool isInitialised = 1;
}

message ProduceGenesisRequest {
  bytes blockHash = 1;
}

message ProduceGenesisResponse {
  BlockSubmissionResponseMsg blockSubmissionResponse = 1;
}

message IngestBlocksRequest {
  repeated bytes encodedBlocks = 1;
}
message IngestBlocksResponse {
  repeated BlockSubmissionResponseMsg blockSubmissionResponses = 1;
}

message StartRequest {
  bytes encodedBlock = 1;
}
message StartResponse {}

message SubmitBlockRequest {
  bytes encodedBlock = 1;
}
message SubmitBlockResponse {
  BlockSubmissionResponseMsg blockSubmissionResponse = 1;
}

message SubmitRollupRequest {
  ExtRollupMsg extRollup = 1;
}
message SubmitRollupResponse {}

message SubmitTxRequest {
  bytes encryptedTx = 1;
}
message SubmitTxResponse {}

message BalanceRequest {
  bytes address = 1;
}
message BalanceResponse {
  uint64 balance = 1;
}

message NonceRequest {
  bytes address = 1;
}
message NonceResponse {
  uint64 nonce = 1;
}

message RoundWinnerRequest {
  bytes parent = 1;
}
message RoundWinnerResponse {
  bool winner = 1;
  ExtRollupMsg extRollup = 2;
}

message StopRequest {}
message StopResponse {}

message GetTransactionRequest {
  bytes txHash = 1;
}
message GetTransactionResponse {
  bool known = 1;
  bytes encodedTransaction = 2;
}

message GetRollupRequest {
  bytes rollupHash = 1;
}
message GetRollupResponse {
  bool known = 1;
  ExtRollupMsg extRollup = 2;
}

// Nested message types.

message AttestationReportMsg {
  bytes Report = 1; // The actual report bytes so it can be shared and verified by other nodes
  bytes PubKey = 2; // public key to encrypt traffic back to this enclave (PKCS1 encoded)
  bytes Owner = 3;
}

message BlockSubmissionResponseMsg {
  BlockHeaderMsg blockHeader = 1;
  bool ingestedBlock = 2;
  string blockNotIngestedCause = 3;

  ExtRollupMsg producedRollup = 4;
  bool ingestedNewRollup = 5;
  HeaderMsg rollupHead = 6;
}

message ExtRollupMsg {
  HeaderMsg header = 1;
  bytes txs = 2;
}

message HeaderMsg {
  bytes parentHash = 1;
  bytes agg = 2;
  uint64 nonce = 3;
  bytes l1Proof = 4;
  bytes stateRoot = 5;
  uint64 height = 6;
  repeated WithdrawalMsg withdrawals = 7;
}

message WithdrawalMsg {
  uint64 amount = 1;
  bytes address = 2;
}

message BlockHeaderMsg {
  bytes ParentHash = 1;
  bytes UncleHash = 2;
  bytes Coinbase = 3;
  bytes Root = 4;
  bytes TxHash = 5;
  bytes ReceiptHash = 6;
  bytes Bloom = 7;
  uint64  Difficulty = 8;
  uint64  Number = 9;
  uint64 GasLimit = 10;
  uint64 GasUsed = 11;
  uint64 Time = 12;
  bytes Extra = 13;
  bytes MixDigest = 14;
  uint64 Nonce = 15;
  uint64  BaseFee = 16;
}
